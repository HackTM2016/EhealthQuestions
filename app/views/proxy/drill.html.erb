<html><head><meta charset="utf-8">
  <style>

    .node {
      cursor: pointer;
    }

    .node circle {
      fill: #fff;
      stroke: steelblue;
      stroke-width: 1.5px;
    }

    .node text {
      font: 10px sans-serif;
    }

    .link {
      fill: none;
      stroke: #ccc;
      stroke-width: 1.5px;
    }

  </style>
</head><body>
<div class="row">
  <div class="col-md-2 col-md-offset-5">
      <input id="q" value=""/>
  </div>
</div>
<script src="//d3js.org/d3.v3.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
<script src="http://code.jquery.com/ui/1.9.2/jquery-ui.js"></script>
<script>

  var margin = {top: 20, right: 120, bottom: 20, left: 120},
      width = 1000 - margin.right - margin.left,
      height = 1000 - margin.top - margin.bottom;

  var i = 0,
      duration = 750,
      root;

  var tree = d3.layout.tree()
      .size([height, width]);

  var diagonal = d3.svg.diagonal()
      .projection(function(d) { return [d.y, d.x]; });

  var svg = d3.select("body").append("svg")
      .attr("width", width + margin.right + margin.left)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
  var current_json = nil;

  function render() {
    query = $("#q").val();
    query=query.replace(" ","+");

    d3.json("/proxy/d3?stale_data=true&q=body:"+query, function(error, flare) {
    if (error) throw error;

    root = flare;
    root.x0 = height / 2;
    root.y0 = 0;

    function collapse(d) {
      if (d.children) {
        d._children = d.children;
        d._children.forEach(collapse);
        d.children = null;
      }
    }

    root.children.forEach(collapse);
    update(root);
  });

  d3.select(self.frameElement).style("height", "1000px");

  function update(source) {

    // Compute the new tree layout.
    var nodes = tree.nodes(root).reverse(),
        links = tree.links(nodes);

    // Normalize for fixed-depth.
    nodes.forEach(function(d) { d.y = d.depth * 180; });

    // Update the nodes…
    var node = svg.selectAll("g.node")
        .data(nodes, function(d) { return d.id || (d.id = ++i); });

    // Enter any new nodes at the parent's previous position.
    var nodeEnter = node.enter().append("g")
        .attr("class", "node")
        .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
        .on("click", click);

    nodeEnter.append("circle")
        .attr("r", 1e-6)
        .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

    nodeEnter.append("text")
        .attr("x", function(d) { return d.children || d._children ? -10 : 10; })
        .attr("dy", ".35em")
        .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
        .text(function(d) { return d.name; })
        .style("fill-opacity", 1e-6);

    // Transition nodes to their new position.
    var nodeUpdate = node.transition()
        .duration(duration)
        .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

    nodeUpdate.select("circle")
        .attr("r", 4.5)
        .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

    nodeUpdate.select("text")
        .style("fill-opacity", 1);

    // Transition exiting nodes to the parent's new position.
    var nodeExit = node.exit().transition()
        .duration(duration)
        .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
        .remove();

    nodeExit.select("circle")
        .attr("r", 1e-6);

    nodeExit.select("text")
        .style("fill-opacity", 1e-6);

    // Update the links…
    var link = svg.selectAll("path.link")
        .data(links, function(d) { return d.target.id; });

    // Enter any new links at the parent's previous position.
    link.enter().insert("path", "g")
        .attr("class", "link")
        .attr("d", function(d) {
          var o = {x: source.x0, y: source.y0};
          return diagonal({source: o, target: o});
        });

    // Transition links to their new position.
    link.transition()
        .duration(duration)
        .attr("d", diagonal);

    // Transition exiting nodes to the parent's new position.
    link.exit().transition()
        .duration(duration)
        .attr("d", function(d) {
          var o = {x: source.x, y: source.y};
          return diagonal({source: o, target: o});
        })
        .remove();

    // Stash the old positions for transition.
    nodes.forEach(function(d) {
      d.x0 = d.x;
      d.y0 = d.y;
    });
  }

    // Toggle children on click.
    function click(d) {
      if (d.children) {
        d._children = d.children;
        d.children = null;
        update(d);
      } else {
        $('#q').val(d.name)
        d.children = d._children;
        d._children = null;

        render();
      }

    }

  }

  render();

  $(document).keyup(function (e) {
    if ($("#q").is(":focus") && (e.keyCode == 13)) {
      render()
    }
  });
</script><svg height="1000" width="1120"><g transform="translate(120,20)"><path d="M0,380C90,380 90,38 180,38" class="link"></path><path d="M0,380C90,380 90,114 180,114" class="link"></path><path d="M0,380C90,380 90,190 180,190" class="link"></path><path d="M0,380C90,380 90,266 180,266" class="link"></path><path d="M0,380C90,380 90,342 180,342" class="link"></path><path d="M0,380C90,380 90,418 180,418" class="link"></path><path d="M0,380C90,380 90,494 180,494" class="link"></path><path d="M0,380C90,380 90,570 180,570" class="link"></path><path d="M0,380C90,380 90,646 180,646" class="link"></path><path d="M0,380C90,380 90,722 180,722" class="link"></path><g transform="translate(180,722)" class="node"><circle style="fill: rgb(176, 196, 222);" r="4.5"></circle><text style="fill-opacity: 1;" text-anchor="end" dy=".35em" x="-10">vis</text></g><g transform="translate(180,646)" class="node"><circle style="fill: rgb(176, 196, 222);" r="4.5"></circle><text style="fill-opacity: 1;" text-anchor="end" dy=".35em" x="-10">util</text></g><g transform="translate(180,570)" class="node"><circle style="fill: rgb(176, 196, 222);" r="4.5"></circle><text style="fill-opacity: 1;" text-anchor="end" dy=".35em" x="-10">scale</text></g><g transform="translate(180,494)" class="node"><circle style="fill: rgb(176, 196, 222);" r="4.5"></circle><text style="fill-opacity: 1;" text-anchor="end" dy=".35em" x="-10">query</text></g><g transform="translate(180,418)" class="node"><circle style="fill: rgb(176, 196, 222);" r="4.5"></circle><text style="fill-opacity: 1;" text-anchor="end" dy=".35em" x="-10">physics</text></g><g transform="translate(180,342)" class="node"><circle style="fill: rgb(176, 196, 222);" r="4.5"></circle><text style="fill-opacity: 1;" text-anchor="end" dy=".35em" x="-10">flex</text></g><g transform="translate(180,266)" class="node"><circle style="fill: rgb(176, 196, 222);" r="4.5"></circle><text style="fill-opacity: 1;" text-anchor="end" dy=".35em" x="-10">display</text></g><g transform="translate(180,190)" class="node"><circle style="fill: rgb(176, 196, 222);" r="4.5"></circle><text style="fill-opacity: 1;" text-anchor="end" dy=".35em" x="-10">data</text></g><g transform="translate(180,114)" class="node"><circle style="fill: rgb(176, 196, 222);" r="4.5"></circle><text style="fill-opacity: 1;" text-anchor="end" dy=".35em" x="-10">animate</text></g><g transform="translate(180,38)" class="node"><circle style="fill: rgb(176, 196, 222);" r="4.5"></circle><text style="fill-opacity: 1;" text-anchor="end" dy=".35em" x="-10">analytics</text></g><g transform="translate(0,380)" class="node"><circle style="fill: rgb(255, 255, 255);" r="4.5"></circle><text style="fill-opacity: 1;" text-anchor="end" dy=".35em" x="-10">flare</text></g></g></svg>
</body>

</html>